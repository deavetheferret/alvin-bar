"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = void 0;

var _logger = require("@parcel/logger");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PACKAGE_JSON_SECTION = "parcel-namer-rewrite";

class Config {
  /**
   * Disable namer in development
   */

  /**
   * Disable name hashing in development
   */

  /**
   * Disable logging names
   */

  /**
   * Use file name hashes from parcel
   */
  constructor() {
    _defineProperty(this, "rules", void 0);

    _defineProperty(this, "chain", void 0);

    _defineProperty(this, "developmentDisable", false);

    _defineProperty(this, "developmentHashing", false);

    _defineProperty(this, "silent", false);

    _defineProperty(this, "useParcelHash", true);

    this.chain = '@parcel/namer-default';
    this.rules = [];
  }

  loadFromPackageFolder(rootFolder, logger) {
    const packageJson = _fs.default.readFileSync(_path.default.join(rootFolder, 'package.json')).toString();

    const packageInfo = JSON.parse(packageJson);
    const packageSection = packageInfo[PACKAGE_JSON_SECTION];

    if (!packageSection) {
      logger.warn({
        message: `no "${PACKAGE_JSON_SECTION}" section in package.json. Use no-rules config`
      });
      return;
    }

    if (packageSection && 'chain' in packageSection) {
      this.chain = packageSection.chain;
    }

    this.silent = packageSection && 'silent' in packageSection && packageSection.silent;

    if (packageSection && 'useParcelHash' in packageSection) {
      this.useParcelHash = !!packageSection.useParcelHash;
    }

    if (packageSection && 'rules' in packageSection) {
      Object.keys(packageSection.rules).forEach(k => {
        const ruleData = packageSection.rules[k];
        const ruleTo = typeof ruleData === 'string' ? ruleData : null;

        if (ruleTo === null) {
          logger.warn(`No "to" rule for test "${k}" `);
          return;
        }

        this.rules.push({
          test: new RegExp(k),
          to: ruleTo
        });
      });
    }

    if (packageSection && 'developmentHashing' in packageSection) {
      this.developmentHashing = !!packageSection.developmentHashing;
    }

    if (packageSection && 'developmentDisable' in packageSection) {
      this.developmentDisable = !!packageSection.developmentDisable;
    }
  }

  selectRule(name) {
    const matches = this.rules.map(rule => rule.test.test(name) ? rule : null).filter(rule => rule != null);

    if (matches.length > 0) {
      return matches[0];
    }

    return null;
  }

}

exports.Config = Config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db25maWcuanMiXSwibmFtZXMiOlsiUEFDS0FHRV9KU09OX1NFQ1RJT04iLCJDb25maWciLCJjb25zdHJ1Y3RvciIsImNoYWluIiwicnVsZXMiLCJsb2FkRnJvbVBhY2thZ2VGb2xkZXIiLCJyb290Rm9sZGVyIiwibG9nZ2VyIiwicGFja2FnZUpzb24iLCJmcyIsInJlYWRGaWxlU3luYyIsInBhdGgiLCJqb2luIiwidG9TdHJpbmciLCJwYWNrYWdlSW5mbyIsIkpTT04iLCJwYXJzZSIsInBhY2thZ2VTZWN0aW9uIiwid2FybiIsIm1lc3NhZ2UiLCJzaWxlbnQiLCJ1c2VQYXJjZWxIYXNoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrIiwicnVsZURhdGEiLCJydWxlVG8iLCJwdXNoIiwidGVzdCIsIlJlZ0V4cCIsInRvIiwiZGV2ZWxvcG1lbnRIYXNoaW5nIiwiZGV2ZWxvcG1lbnREaXNhYmxlIiwic2VsZWN0UnVsZSIsIm5hbWUiLCJtYXRjaGVzIiwibWFwIiwicnVsZSIsImZpbHRlciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxvQkFBb0IsR0FBRyxzQkFBN0I7O0FBRU8sTUFBTUMsTUFBTixDQUFhO0FBR2hCO0FBQ0o7QUFDQTs7QUFFSTtBQUNKO0FBQ0E7O0FBRUk7QUFDSjtBQUNBOztBQUVJO0FBQ0o7QUFDQTtBQUdJQyxFQUFBQSxXQUFXLEdBQUc7QUFBQTs7QUFBQTs7QUFBQSxnREFkTyxLQWNQOztBQUFBLGdEQVZPLEtBVVA7O0FBQUEsb0NBTkwsS0FNSzs7QUFBQSwyQ0FGRSxJQUVGOztBQUNWLFNBQUtDLEtBQUwsR0FBYSx1QkFBYjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0g7O0FBRURDLEVBQUFBLHFCQUFxQixDQUFDQyxVQUFELEVBQXFCQyxNQUFyQixFQUEyQztBQUM1RCxVQUFNQyxXQUFXLEdBQUdDLFlBQUdDLFlBQUgsQ0FBZ0JDLGNBQUtDLElBQUwsQ0FBVU4sVUFBVixFQUFzQixjQUF0QixDQUFoQixFQUF1RE8sUUFBdkQsRUFBcEI7O0FBQ0EsVUFBTUMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV1IsV0FBWCxDQUFwQjtBQUNBLFVBQU1TLGNBQWMsR0FBR0gsV0FBVyxDQUFDZCxvQkFBRCxDQUFsQzs7QUFDQSxRQUFJLENBQUNpQixjQUFMLEVBQXFCO0FBQ2pCVixNQUFBQSxNQUFNLENBQUNXLElBQVAsQ0FBWTtBQUNSQyxRQUFBQSxPQUFPLEVBQUcsT0FBTW5CLG9CQUFxQjtBQUQ3QixPQUFaO0FBR0E7QUFDSDs7QUFFRCxRQUFJaUIsY0FBYyxJQUFJLFdBQVdBLGNBQWpDLEVBQWlEO0FBQzdDLFdBQUtkLEtBQUwsR0FBYWMsY0FBYyxDQUFDZCxLQUE1QjtBQUNIOztBQUVELFNBQUtpQixNQUFMLEdBQWNILGNBQWMsSUFBSSxZQUFZQSxjQUE5QixJQUFnREEsY0FBYyxDQUFDRyxNQUE3RTs7QUFFQSxRQUFJSCxjQUFjLElBQUksbUJBQW1CQSxjQUF6QyxFQUF5RDtBQUNyRCxXQUFLSSxhQUFMLEdBQXFCLENBQUMsQ0FBQ0osY0FBYyxDQUFDSSxhQUF0QztBQUNIOztBQUVELFFBQUlKLGNBQWMsSUFBSSxXQUFXQSxjQUFqQyxFQUFpRDtBQUM3Q0ssTUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlOLGNBQWMsQ0FBQ2IsS0FBM0IsRUFBa0NvQixPQUFsQyxDQUEwQ0MsQ0FBQyxJQUFJO0FBQzNDLGNBQU1DLFFBQVEsR0FBR1QsY0FBYyxDQUFDYixLQUFmLENBQXFCcUIsQ0FBckIsQ0FBakI7QUFDQSxjQUFNRSxNQUFNLEdBQUcsT0FBT0QsUUFBUCxLQUFvQixRQUFwQixHQUErQkEsUUFBL0IsR0FBMEMsSUFBekQ7O0FBQ0EsWUFBSUMsTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDakJwQixVQUFBQSxNQUFNLENBQUNXLElBQVAsQ0FBYSwwQkFBeUJPLENBQUUsSUFBeEM7QUFDQTtBQUNIOztBQUVELGFBQUtyQixLQUFMLENBQVd3QixJQUFYLENBQWdCO0FBQ1pDLFVBQUFBLElBQUksRUFBRSxJQUFJQyxNQUFKLENBQVdMLENBQVgsQ0FETTtBQUVaTSxVQUFBQSxFQUFFLEVBQUVKO0FBRlEsU0FBaEI7QUFJSCxPQVpEO0FBYUg7O0FBRUQsUUFBSVYsY0FBYyxJQUFJLHdCQUF3QkEsY0FBOUMsRUFBOEQ7QUFDMUQsV0FBS2Usa0JBQUwsR0FBMEIsQ0FBQyxDQUFDZixjQUFjLENBQUNlLGtCQUEzQztBQUNIOztBQUVELFFBQUlmLGNBQWMsSUFBSSx3QkFBd0JBLGNBQTlDLEVBQThEO0FBQzFELFdBQUtnQixrQkFBTCxHQUEwQixDQUFDLENBQUNoQixjQUFjLENBQUNnQixrQkFBM0M7QUFDSDtBQUNKOztBQUVEQyxFQUFBQSxVQUFVLENBQUNDLElBQUQsRUFBaUM7QUFDdkMsVUFBTUMsT0FBTyxHQUFHLEtBQUtoQyxLQUFMLENBQ1hpQyxHQURXLENBQ1BDLElBQUksSUFBSUEsSUFBSSxDQUFDVCxJQUFMLENBQVVBLElBQVYsQ0FBZU0sSUFBZixJQUF1QkcsSUFBdkIsR0FBOEIsSUFEL0IsRUFFWEMsTUFGVyxDQUVKRCxJQUFJLElBQUlBLElBQUksSUFBSSxJQUZaLENBQWhCOztBQUdBLFFBQUlGLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUNwQixhQUFPSixPQUFPLENBQUMsQ0FBRCxDQUFkO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0g7O0FBL0VlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbHVnaW5Mb2dnZXJ9IGZyb20gJ0BwYXJjZWwvbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgUEFDS0FHRV9KU09OX1NFQ1RJT04gPSBcInBhcmNlbC1uYW1lci1yZXdyaXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIHJ1bGVzOiBOYW1lclJ1bGVbXVxuICAgIGNoYWluOiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIG5hbWVyIGluIGRldmVsb3BtZW50XG4gICAgICovXG4gICAgZGV2ZWxvcG1lbnREaXNhYmxlID0gZmFsc2VcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIG5hbWUgaGFzaGluZyBpbiBkZXZlbG9wbWVudFxuICAgICAqL1xuICAgIGRldmVsb3BtZW50SGFzaGluZyA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBsb2dnaW5nIG5hbWVzXG4gICAgICovXG4gICAgc2lsZW50ID0gZmFsc2VcbiAgICAvKipcbiAgICAgKiBVc2UgZmlsZSBuYW1lIGhhc2hlcyBmcm9tIHBhcmNlbFxuICAgICAqL1xuICAgIHVzZVBhcmNlbEhhc2ggPSB0cnVlXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaGFpbiA9ICdAcGFyY2VsL25hbWVyLWRlZmF1bHQnO1xuICAgICAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgfVxuXG4gICAgbG9hZEZyb21QYWNrYWdlRm9sZGVyKHJvb3RGb2xkZXI6IHN0cmluZywgbG9nZ2VyOiBQbHVnaW5Mb2dnZXIpIHtcbiAgICAgICAgY29uc3QgcGFja2FnZUpzb24gPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKHJvb3RGb2xkZXIsICdwYWNrYWdlLmpzb24nKSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgcGFja2FnZUluZm8gPSBKU09OLnBhcnNlKHBhY2thZ2VKc29uKTtcbiAgICAgICAgY29uc3QgcGFja2FnZVNlY3Rpb24gPSBwYWNrYWdlSW5mb1tQQUNLQUdFX0pTT05fU0VDVElPTl07XG4gICAgICAgIGlmICghcGFja2FnZVNlY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgbm8gXCIke1BBQ0tBR0VfSlNPTl9TRUNUSU9OfVwiIHNlY3Rpb24gaW4gcGFja2FnZS5qc29uLiBVc2Ugbm8tcnVsZXMgY29uZmlnYFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWNrYWdlU2VjdGlvbiAmJiAnY2hhaW4nIGluIHBhY2thZ2VTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNoYWluID0gcGFja2FnZVNlY3Rpb24uY2hhaW47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNpbGVudCA9IHBhY2thZ2VTZWN0aW9uICYmICdzaWxlbnQnIGluIHBhY2thZ2VTZWN0aW9uICYmIHBhY2thZ2VTZWN0aW9uLnNpbGVudDtcblxuICAgICAgICBpZiAocGFja2FnZVNlY3Rpb24gJiYgJ3VzZVBhcmNlbEhhc2gnIGluIHBhY2thZ2VTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnVzZVBhcmNlbEhhc2ggPSAhIXBhY2thZ2VTZWN0aW9uLnVzZVBhcmNlbEhhc2g7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFja2FnZVNlY3Rpb24gJiYgJ3J1bGVzJyBpbiBwYWNrYWdlU2VjdGlvbikge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocGFja2FnZVNlY3Rpb24ucnVsZXMpLmZvckVhY2goayA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZURhdGEgPSBwYWNrYWdlU2VjdGlvbi5ydWxlc1trXTtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlVG8gPSB0eXBlb2YgcnVsZURhdGEgPT09ICdzdHJpbmcnID8gcnVsZURhdGEgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChydWxlVG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYE5vIFwidG9cIiBydWxlIGZvciB0ZXN0IFwiJHtrfVwiIGApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5ydWxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogbmV3IFJlZ0V4cChrKSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHJ1bGVUb1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhY2thZ2VTZWN0aW9uICYmICdkZXZlbG9wbWVudEhhc2hpbmcnIGluIHBhY2thZ2VTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRldmVsb3BtZW50SGFzaGluZyA9ICEhcGFja2FnZVNlY3Rpb24uZGV2ZWxvcG1lbnRIYXNoaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhY2thZ2VTZWN0aW9uICYmICdkZXZlbG9wbWVudERpc2FibGUnIGluIHBhY2thZ2VTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRldmVsb3BtZW50RGlzYWJsZSA9ICEhcGFja2FnZVNlY3Rpb24uZGV2ZWxvcG1lbnREaXNhYmxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0UnVsZShuYW1lOiBzdHJpbmcpOiBOYW1lclJ1bGUgfCBudWxsIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMucnVsZXNcbiAgICAgICAgICAgIC5tYXAocnVsZSA9PiBydWxlLnRlc3QudGVzdChuYW1lKSA/IHJ1bGUgOiBudWxsKVxuICAgICAgICAgICAgLmZpbHRlcihydWxlID0+IHJ1bGUgIT0gbnVsbCk7XG4gICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYW1lclJ1bGUge1xuICAgIHRlc3Q6IFJlZ0V4cDtcbiAgICB0bzogc3RyaW5nO1xufVxuIl19